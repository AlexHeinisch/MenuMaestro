/**
 * Menu Maestro ingredient API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CreateIngredientDto } from '../model/models';
import { IngredientDto } from '../model/models';
import { IngredientListPaginatedDto } from '../model/models';
import { IngredientWithCategoryListPaginatedDto } from '../model/models';
import { ReplaceIngredientRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface IngredientsApiServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Approve a suggested ingredient.
     * 
     * @param ingredientId ID of the suggested ingredient to approve
     */
    approveIngredient(ingredientId: number, extraHttpRequestParams?: any): Observable<IngredientDto>;

    /**
     * Delete an existing ingredient.
     * 
     * @param ingredientId ID of the ingredient to delete
     */
    deleteIngredient(ingredientId: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get all suggested ingredients.
     * 
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    ingredientSuggestions(page?: number, size?: number, sort?: Array<string>, extraHttpRequestParams?: any): Observable<IngredientWithCategoryListPaginatedDto>;

    /**
     * Replace an existing ingredient.
     * 
     * @param ingredientId ID of the ingredient to replace
     * @param replaceIngredientRequest 
     */
    replaceIngredient(ingredientId: number, replaceIngredientRequest: ReplaceIngredientRequest, extraHttpRequestParams?: any): Observable<IngredientDto>;

    /**
     * Get all ingredients, or all matching the given filters. Supports pagination and search.
     * 
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param name 
     * @param token Optional token to be used by anonymous users
     */
    searchIngredients(page?: number, size?: number, sort?: Array<string>, name?: string, token?: string, extraHttpRequestParams?: any): Observable<IngredientListPaginatedDto>;

    /**
     * Suggest a new ingredient.
     * 
     * @param createIngredientDto 
     */
    suggestIngredient(createIngredientDto: CreateIngredientDto, extraHttpRequestParams?: any): Observable<IngredientDto>;

}
