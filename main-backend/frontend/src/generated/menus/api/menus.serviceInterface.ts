/**
 * Menu Maestro menu API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { AddMealToMenuRequest } from '../model/models';
import { ErrorResponse } from '../model/models';
import { MenuCreateDto } from '../model/models';
import { MenuDetailDto } from '../model/models';
import { MenuStatus } from '../model/models';
import { MenuSummaryDto } from '../model/models';
import { MenuSummaryListPaginatedDto } from '../model/models';
import { ProblemDetails } from '../model/models';
import { SnapshotCreateDto } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface MenusApiServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Add a new meal to a menu
     * 
     * @param id Id of the menu to add a meal to
     * @param addMealToMenuRequest Data to create a new meal in a menu
     */
    addMealToMenu(id: number, addMealToMenuRequest: AddMealToMenuRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Add a new snapshot to a menu
     * 
     * @param id Id of the menu to add a snapshot to
     * @param snapshotCreateDto Data to add a new snapshot to a menu
     */
    addSnapshotToMenu(id: number, snapshotCreateDto: SnapshotCreateDto, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Reorder the menu-items (snapshots and meals) by giving a reordered list of their ids
     * 
     * @param id 
     * @param requestBody Reordered list with the menu-item ids
     */
    changeMenuItemOrder(id: number, requestBody: Array<number>, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Close a menu, which makes it unchangeable and transfers its stash to the organization
     * 
     * @param id 
     */
    closeMenuById(id: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Create a new menu
     * 
     * @param menuCreateDto Data for the new menu
     */
    createMenu(menuCreateDto: MenuCreateDto, extraHttpRequestParams?: any): Observable<MenuSummaryDto>;

    /**
     * Delete a menu by its id
     * 
     * @param id Id of the menu to delete
     */
    deleteMenuById(id: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Returns true if a Shopping list for the corresponding Menu exists, false otherwise
     * 
     * @param menuId Id of the menu
     */
    existsShoppingListForMenu(menuId: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Get a single menu by its id
     * 
     * @param id 
     */
    getMenuById(id: number, extraHttpRequestParams?: any): Observable<MenuDetailDto>;

    /**
     * Search menus by specified criteria
     * 
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param name 
     * @param organizationId 
     * @param status 
     */
    getMenus(page?: number, size?: number, sort?: Array<string>, name?: string, organizationId?: number, status?: MenuStatus, extraHttpRequestParams?: any): Observable<MenuSummaryListPaginatedDto>;

    /**
     * Removes a snapshot from a menu
     * 
     * @param menuId Id of the menu to remove a snapshot from
     * @param snapshotId Id of the snapshot to be removed
     */
    removeSnapshotFromMenu(menuId: number, snapshotId: number, extraHttpRequestParams?: any): Observable<{}>;

}
