/**
 * Shopping List API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CloseShoppingListDto } from '../model/models';
import { ErrorResponse } from '../model/models';
import { ShoppingListCreateDto } from '../model/models';
import { ShoppingListDto } from '../model/models';
import { ShoppingListEditDto } from '../model/models';
import { ShoppingListIngredientAddDto } from '../model/models';
import { ShoppingListListPaginatedDto } from '../model/models';
import { ShoppingListPreviewEntryDto } from '../model/models';
import { ShoppingListStatus } from '../model/models';
import { ShoppingListTokenDto } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface ShoppingListApiServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Add a new item (existing ingredient or custom one) to a shopping list
     * 
     * @param id The ID of the shopping list
     * @param shoppingListIngredientAddDto Data to add a new item in a shopping list
     * @param token Optional token to be used by anonymous users
     */
    addItemToShoppingList(id: number, shoppingListIngredientAddDto: ShoppingListIngredientAddDto, token?: string, extraHttpRequestParams?: any): Observable<ShoppingListDto>;

    /**
     * Manually close a shopping list and mark it as CLOSED
     * 
     * @param id The ID of the shopping list
     */
    closeShoppingList(id: number, extraHttpRequestParams?: any): Observable<CloseShoppingListDto>;

    /**
     * Create a new shopping list
     * 
     * @param shoppingListCreateDto The details of the shopping list
     */
    createShoppingList(shoppingListCreateDto: ShoppingListCreateDto, extraHttpRequestParams?: any): Observable<ShoppingListDto>;

    /**
     * Used to create a share token for anonymous users to see and use the shopping list.
     * 
     * @param id The ID of the shopping list
     */
    createShoppingListToken(id: number, extraHttpRequestParams?: any): Observable<ShoppingListTokenDto>;

    /**
     * Edit a shopping list (used for updating the checkedBy property and status)
     * 
     * @param id The ID of the shopping list
     * @param shoppingListEditDto The edited shopping list
     * @param token Optional token to be used by anonymous users
     */
    editShoppingList(id: number, shoppingListEditDto: ShoppingListEditDto, token?: string, extraHttpRequestParams?: any): Observable<ShoppingListDto>;

    /**
     * Get a shopping list by ID
     * 
     * @param id The ID of the shopping list
     * @param token Optional token to be used by anonymous users
     */
    getShoppingListById(id: number, token?: string, extraHttpRequestParams?: any): Observable<ShoppingListDto>;

    /**
     * perform same computations as for the shopping list but preview which ingredients will be used.
     * 
     * @param shoppingListCreateDto The details of the shopping list
     */
    getShoppingListPreview(shoppingListCreateDto: ShoppingListCreateDto, extraHttpRequestParams?: any): Observable<Array<ShoppingListPreviewEntryDto>>;

    /**
     * Search for shopping lists by name and completion status
     * 
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     * @param name The name of the shopping list (supports partial match)
     * @param status Filter by shopping list status
     * @param menuId Filter by associated menuId of shopping list
     */
    searchShoppingLists(page?: number, size?: number, name?: string, status?: ShoppingListStatus, menuId?: number, extraHttpRequestParams?: any): Observable<ShoppingListListPaginatedDto>;

}
