/**
 * Menu Maestro organization API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ChangeMemberRoleRequest } from '../model/models';
import { ErrorResponse } from '../model/models';
import { InviteMemberRequest } from '../model/models';
import { OrganizationCreateDto } from '../model/models';
import { OrganizationEditDto } from '../model/models';
import { OrganizationMemberListPaginatedDto } from '../model/models';
import { OrganizationSummaryDto } from '../model/models';
import { OrganizationSummaryListPaginatedDto } from '../model/models';
import { RespondToInvitationRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface OrganizationsApiServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Change the role of a member in an organization
     * Update the role of a specific member. Only admins/owners can perform this action.
     * @param id The ID of the organization
     * @param username The username of the account whose role is being changed
     * @param changeMemberRoleRequest The new role to assign to the member
     */
    changeMemberRole(id: number, username: string, changeMemberRoleRequest: ChangeMemberRoleRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * 
     * @param organizationCreateDto Organization data to be created.
     */
    createOrganization(organizationCreateDto: OrganizationCreateDto, extraHttpRequestParams?: any): Observable<OrganizationSummaryDto>;

    /**
     * Delete an organization by ID
     * Delete the specified organization from the system.
     * @param id The ID of the organization to delete
     */
    deleteOrganization(id: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Edit organization information
     * Allows updating the organization\&#39;s name and description.
     * @param id The ID of the organization
     * @param organizationEditDto The edited organization data
     */
    editOrganization(id: number, organizationEditDto: OrganizationEditDto, extraHttpRequestParams?: any): Observable<OrganizationSummaryDto>;

    /**
     * 
     * 
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     */
    getInvitations(page?: number, size?: number, extraHttpRequestParams?: any): Observable<OrganizationSummaryListPaginatedDto>;

    /**
     * Get organization details by ID
     * 
     * @param id The ID of the organization
     */
    getOrganizationById(id: number, extraHttpRequestParams?: any): Observable<OrganizationSummaryDto>;

    /**
     * Get all members of an organization
     * Retrieve a list of all members of a specified organization.
     * @param id The ID of the organization
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     */
    getOrganizationMembers(id: number, page?: number, size?: number, extraHttpRequestParams?: any): Observable<OrganizationMemberListPaginatedDto>;

    /**
     * 
     * 
     * @param page Zero-based page index (0..N)
     * @param size The size of the page to be returned
     * @param name Name of an organisation
     */
    getOrganizations(page?: number, size?: number, name?: string, extraHttpRequestParams?: any): Observable<OrganizationSummaryListPaginatedDto>;

    /**
     * Invite a user to an organization
     * Invite a user to an organization by specifying their unique username.
     * @param id The ID of the organization
     * @param inviteMemberRequest User details to invite to the organization
     */
    inviteMember(id: number, inviteMemberRequest: InviteMemberRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Remove a member from an organization
     * Remove a specific member from the organization by their username. If the user is in the organization this represents a kick-action. If the user is invited this represents revoking the invitation. Only admins can perform this action.
     * @param id The ID of the organization
     * @param username The username of the member to remove
     */
    removeMember(id: number, username: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Respond to an invitation to join an organization
     * Endpoint to allow a user to accept or decline an invitation to join an organization.
     * @param id The ID of the organization
     * @param respondToInvitationRequest Response to the invitation
     */
    respondToInvitation(id: number, respondToInvitationRequest: RespondToInvitationRequest, extraHttpRequestParams?: any): Observable<{}>;

}
