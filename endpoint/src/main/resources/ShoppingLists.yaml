openapi: 3.0.0
info:
  title: Shopping List API
  description: API for managing shopping lists and items.
  version: 1.0.0

servers:
  - url: http://localhost:8080/api/v1

paths:
  /shopping-lists/used-ingredient-preview:
    post:
      summary: perform same computations as for the shopping list but preview which ingredients will be used.
      operationId: getShoppingListPreview
      tags:
        - ShoppingList
      requestBody:
        description: The details of the shopping list
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListCreateDto'
      responses:
        '200':
          description: Success Status, list of ingredients and amount taken from stash
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingListPreviewEntryDto'
  /shopping-lists:
    post:
      summary: Create a new shopping list
      operationId: createShoppingList
      tags:
        - ShoppingList
      requestBody:
        description: The details of the shopping list
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListCreateDto'
      responses:
        '201':
          description: Successfully created shopping list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListDto'
    get:
      summary: Search for shopping lists by name and completion status
      operationId: "searchShoppingLists"
      tags:
        - ShoppingList
      parameters:
        - $ref: 'https://api.swaggerhub.com/apis/spring/pagination/1.0.0#/components/parameters/pageParam'
        - $ref: 'https://api.swaggerhub.com/apis/spring/pagination/1.0.0#/components/parameters/sizeParam'
        - name: name
          in: query
          description: The name of the shopping list (supports partial match)
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by shopping list status
          required: false
          schema:
            $ref: '#/components/schemas/ShoppingListStatus'
        - name: menuId
          in: query
          description: Filter by associated menuId of shopping list
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully retrieved matching shopping lists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListListPaginatedDto'
        '400':
          description: Bad Request - Invalid query parameters
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"

  /shopping-lists/{id}:
    get:
      summary: Get a shopping list by ID
      operationId: "getShoppingListById"
      tags:
        - ShoppingList
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the shopping list
          schema:
            type: integer
            format: int64
        - name: token
          in: query
          required: false
          description: Optional token to be used by anonymous users
          schema:
            type: string
            default: ""
      responses:
        '200':
          description: Successfully retrieved shopping list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListDto'
        '404':
          description: Shopping list not found
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"
    patch:
      summary: Edit a shopping list (used for updating the checkedBy property and status)
      operationId: "editShoppingList"
      tags:
        - ShoppingList
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the shopping list
          schema:
            type: integer
            format: int64
        - name: token
          in: query
          required: false
          description: Optional token to be used by anonymous users
          schema:
            type: string
            default: ""
      requestBody:
        description: The edited shopping list
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListEditDto'
      responses:
        '200':
          description: Successfully updated elements on the shopping list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListDto'
        '404':
          description: Shopping list or elements not found
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"
        '422':
          description: Unprocessable Entity - Validation errors occurred
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"
  /shopping-lists/{id}/token:
    post:
      summary: Used to create a share token for anonymous users to see and use the shopping list.
      operationId: createShoppingListToken
      tags:
        - ShoppingList
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the shopping list
          schema:
            type: integer
            format: int64
      responses:
        201:
          description: Successfully created a token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListTokenDto'
        403:
          description: No permission to create token.
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"
        404:
          description: Shopping list not found
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"


  /shopping-lists/{id}/items:
    post:
      operationId: "addItemToShoppingList"
      tags:
        - ShoppingList
      summary: "Add a new item (existing ingredient or custom one) to a shopping list"
      parameters:
        - name: id
          description: The ID of the shopping list
          in: path
          schema:
            type: integer
            format: int64
          required: true
        - name: token
          in: query
          required: false
          description: Optional token to be used by anonymous users
          schema:
            type: string
            default: ""
      requestBody:
        description: Data to add a new item in a shopping list
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingListIngredientAddDto"
      responses:
        '201':
          description: Success - Item was successfully added to the shopping list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingListDto'
        '404':
          description: Shopping list not found or ingredient specified, but not found
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"
        '422':
          description: Validation error occurred.
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"
        '409':
          description: Conflict occurred (Either an existing ingredient ID or a custom ingredient name must be provided, but not both)
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"

  /shopping-lists/{id}/close:
    patch:
      summary: Manually close a shopping list and mark it as CLOSED
      operationId: "closeShoppingList"
      tags:
        - ShoppingList
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the shopping list
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully closed the shopping list, returns the stashid where the content was added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloseShoppingListDto"
        "404":
          description: Shopping list not found
          content:
            application/json:
              schema:
                $ref: "ErrorResponse.yaml#/components/responses/ErrorResponse"



components:
  schemas:
    ShoppingListTokenDto:
      type: object
      properties:
        token:
          type: string
          description: Issued token to use in shopping lists
    ShoppingListCreateDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the shopping list
        menuId:
          type: integer
          format: int64
        organizationId:
          type: integer
          format: int64
          description: ID of the organization managing the shopping list
        snapshotIds:
          type: array
          description: A list of snapshot IDs associated with the shopping list
          items:
            type: integer
            format: int64
      required:
        - name
        - menuId
        - organizationId
        - snapshotIds

    ShoppingListStatus:
      description: The status of the shopping list, indicating whether it is open or completed.
      type: string
      enum:
        - OPEN
        - CLOSED

    ShoppingListIngredientDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        ingredient:
          $ref: 'Ingredients.yaml#/components/schemas/IngredientUseDto'
        isChecked:
          type: boolean
          description: Indicates if an ingredient has been checked
        checkedBy:
          type: string
          description: The person who checked the ingredient
        category:
          $ref: 'Ingredients.yaml#/components/schemas/IngredientCategory'
          description: Category of the ingredient (e.g., FRESH_PRODUCE, DAIRY_AND_EGGS)
      required:
        - id
        - ingredient
        - isChecked
        - checkedBy
        - category

    ShoppingListIngredientAddDto:
      type: object
      properties:
        existingIngredientId:
          description: "Unique id of the ingredient to be added. Used only when we add an ingredient existing in the database to the shopping list."
          type: integer
          format: int64
        customIngredientName:
          type: string
          description: "Name of the ingredient to be added. Used only when we add a ingredient not existing in the database to the shopping list. "
        unit:
          $ref: 'Ingredients.yaml#/components/schemas/IngredientUnitDto'
        amount:
          description: "Amount of the ingredient used in regard to the unit."
          type: number
          format: double
      required:
        - unit
        - amount

    ShoppingListIngredientEditDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        checked:
          type: boolean
          description: If the ingredient is checked off on the shopping list
      required:
        - id
        - checked
    CloseShoppingListDto:
      type: object
      properties:
        stashId:
          type: integer
          format: int64
        shoppingListDto:
          $ref: '#/components/schemas/ShoppingListDto'
      required:
        - stashId
        - shoppingListDto


    ShoppingListDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: Name of the shopping list
        status:
          $ref: '#/components/schemas/ShoppingListStatus'
        organizationId:
          type: integer
          description: ID of the organization managing the shopping list
        menuId:
          type: integer
          format: int64
          description: ID of the menu the shopping list was created from
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListIngredientDto'
          description: List of ingredients included in the shopping list
      required:
        - id
        - name
        - status
        - organizationId
        - ingredients

    ShoppingListListPaginatedDto:
      description: "Paginated list containing shopping list dtos"
      type: object
      allOf:
        - $ref: 'PaginationResponse.yaml#/components/schemas/PaginationResponse'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/ShoppingListDto'
          required:
            - content

    ShoppingListEditDto:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/ShoppingListStatus'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListIngredientEditDto'
          description: List of ingredients that are already in the shopping list, but need their checkedBy property updated

    ShoppingListPreviewEntryDto:
      type: object
      allOf:
        - $ref: 'Ingredients.yaml#/components/schemas/IngredientUseDto'
        - type: object
          properties:
            totalAmount:
              type: number
              format: float
          required:
            - totalAmount
